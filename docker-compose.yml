 ---
version: "3"

services:  
  postgres:
    image: postgres:16.4
    networks:
      iceberg_net:    
    ports:
      - 25432:5432
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 13p0ssw1rd!29
      POSTGRES_DB: catalog
      POSTGRES_INITDB_ARGS: "--encoding UTF8 --data-checksums"
    # /docker-entrypoint-initdb.d
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 5s
      timeout: 2s
      retries: 15 

  spark-iceberg:
    image: misaltan/spark-iceberg
    container_name: spark-iceberg
    #build: spark/
    networks:
      iceberg_net:
    depends_on:
      - nessie  
      - minio
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./notebooks:/home/iceberg/notebooks/notebooks                      
      - ./spark-defaults.conf:/opt/spark/conf/spark-defaults.conf     
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=13p0ssw1rd!29
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
                  
  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    networks:
      iceberg_net:
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=13p0ssw1rd!29
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
      
  nessie:
    image: ghcr.io/projectnessie/nessie:0.97.1
    networks:
      iceberg_net:    
    ports:
      # API port
      - "19120:19120"
      # Management port (metrics and health checks)
      - "9009:9000"
    depends_on: 
      - minio
    environment:
      # Version store settings.
      # This example uses Postgres as the version store.
      - nessie.version.store.type=JDBC
      - nessie.version.store.persist.jdbc.datasource=postgresql
      - quarkus.datasource.postgresql.jdbc.url=jdbc:postgresql://postgres:25432/catalog
      - quarkus.datasource.postgresql.username=postgres
      - quarkus.datasource.postgresql.password=13p0ssw1rd!29
      # AuthN settings.
      # This examples uses Keycloak for authentication.
      - nessie.server.authentication.enabled=false
      #- quarkus.oidc.auth-server-url=http://keycloak:8080/realms/iceberg
      #- quarkus.oidc.client-id=client1
      #- quarkus.oidc.token.issuer=http://127.0.0.1:8080/realms/iceberg
      # Object store settings.
      # This example uses MinIO as the object store.
      - nessie.catalog.default-warehouse=warehouse
      - nessie.catalog.warehouses.warehouse.location=s3://warehouse/
      - nessie.catalog.service.s3.default-options.region=us-east-1
      - nessie.catalog.service.s3.default-options.path-style-access=true
      - nessie.catalog.service.s3.default-options.access-key=urn:nessie-secret:quarkus:nessie.catalog.secrets.access-key
      - nessie.catalog.secrets.access-key.name=admin
      - nessie.catalog.secrets.access-key.secret=13p0ssw1rd!29
      # MinIO endpoint for Nessie server
      - nessie.catalog.service.s3.default-options.endpoint=http://minio:9000/
      # MinIO endpoint for clients (on the Podman/Docker host)
      - nessie.catalog.service.s3.default-options.external-endpoint=http://127.0.0.1:9001/
      # OpenTelemetry settings.
      # This example uses Jaeger as the OpenTelemetry traces collector.
      #- quarkus.otel.exporter.otlp.endpoint=http://jaeger:4317
      # Authorization settings.
      # In this example, Nessie is configured with 3 clients and 3 rules:
      # - client1: can access all namespaces
      # - client2: can access all namespaces except 'sales'
      # - client3: can access all namespaces except 'eng'
      - nessie.server.authorization.enabled=false
      #- nessie.server.authorization.rules.client1=role=='service-account-client1'
      #- nessie.server.authorization.rules.client2=role=='service-account-client2' && !path.startsWith('sales')
      #- nessie.server.authorization.rules.client3=role=='service-account-client3' && !path.startsWith('eng')
    healthcheck:
      test: "exec 3<>/dev/tcp/localhost/9009 && echo -e 'GET /q/health HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && cat <&3 | grep -q '200 OK'"
      interval: 5s
      timeout: 2s
      retries: 15


  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=13p0ssw1rd!29
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=13p0ssw1rd!29
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin 13p0ssw1rd!29) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "
networks:
  iceberg_net:
